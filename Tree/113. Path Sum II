这道题最搞笑的地方在于正确答案重复两次，如果不这样写的话：
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> tmpList = new ArrayList<>();
        if(root == null) {
            return res;
        }else if((root.left != null || root.right != null) && root.val == sum) {
            return res;
        }
        boolean count = true;
        helper(root, sum, 0, res, tmpList, count);
        return res;
    }
    public void helper(TreeNode root, int target, int sum, List<List<Integer>> res, List<Integer> tmpList, boolean count) {
        if(root == null) {
            if(sum == target && count == true) {
                res.add(new ArrayList(tmpList));
            }
            return;
        }
        tmpList.add(root.val);
        helper(root.left, target, root.val + sum, res, tmpList, count);
        helper(root.right, target, root.val + sum, res, tmpList, !count);
        count = true;
        tmpList.remove(tmpList.size() - 1);
    }

    
Your answer: [[5,4,11,2],[5,4,11,2],[5,8,4,5],[5,8,4,5]]
Expected: [[5,4,11,2],[5,8,4,5]]

还有一个更大的问题，假如
Input: [1,-2,-3,1,3,-2,null,-1]
       -2
Output: [1, -3]
Expected: []

因为 1 -> -3 -> -2，-2是leaf node，必须走到-2才能算走完。故关键如何判断是leaf node? node.left == null && node.right == null

一下
以下代码可供参考
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> tmpList = new ArrayList<>();
        if(root == null) {
            return res;
        }
        helper(root, sum, tmpList, res);
        return res;
    }
    public void helper(TreeNode root, int sum, List<Integer> tmpList, List<List<Integer>> res) {
        tmpList.add(root.val);
        if(root.left == null && root.right == null) {
            if(sum == root.val) {
                res.add(new ArrayList(tmpList));
            }
            return;
        }
        if(root.left != null) {
            helper(root.left, sum - root.val, tmpList, res);
        }
        if(root.right != null) {
            helper(root.right, sum - root.val, tmpList, res);
        }
        tmpList.remove(tmpList.size() - 1);
    }
}



